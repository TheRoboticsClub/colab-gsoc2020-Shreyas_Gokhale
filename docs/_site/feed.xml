<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/" rel="alternate" type="text/html" hreflang="en-US" /><updated>2020-08-30T20:31:21+02:00</updated><id>http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/feed.xml</id><title type="html">GSoC 2020 | Shreyas Gokhale</title><subtitle>Creating new multirobot &lt;br&gt; exercises for Jderobot Academy &lt;br&gt; &lt;b&gt;&lt;a href=&quot;https://summerofcode.withgoogle.com/projects/#5877403320057856&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JdeMultiBot&lt;/a&gt;&lt;/b&gt; &lt;br&gt;</subtitle><author><name>Shreyas Gokhale</name><email>me@shreyasgokhale.com</email></author><entry><title type="html">Evaluation 3 Report</title><link href="http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/phase-three-report" rel="alternate" type="text/html" title="Evaluation 3 Report" /><published>2020-08-30T19:00:00+02:00</published><updated>2020-08-30T19:00:00+02:00</updated><id>http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/phase-three-report</id><content type="html" xml:base="http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/phase-three-report">&lt;h1 id=&quot;gsoc-phase-3-report&quot;&gt;GSoC Phase 3 Report&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Week&lt;/th&gt;
      &lt;th&gt;Dates&lt;/th&gt;
      &lt;th&gt;Main Tasks&lt;/th&gt;
      &lt;th&gt;Sub tasks completed&lt;/th&gt;
      &lt;th&gt;Issues Resolved / PRs Merged&lt;/th&gt;
      &lt;th&gt;Blog&lt;/th&gt;
      &lt;th&gt;Published URL&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 10&lt;/td&gt;
      &lt;td&gt;10th August - 16th August&lt;/td&gt;
      &lt;td&gt;Finishing single robot ROS2 environment&lt;/td&gt;
      &lt;td&gt;Complete model with working lift, Writing action plugin,  Finalizing structure for multi robot  exercise&lt;/td&gt;
      &lt;td&gt;#10 Gazebo Import #7 ROS2 Amazon Robot model #1 ROS2 planning system example bugfix&lt;/td&gt;
      &lt;td&gt;2x!&lt;/td&gt;
      &lt;td&gt;https://theroboticsclub.github.io/colab-gsoc2020-Shreyas_Gokhale/two-x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 11&lt;/td&gt;
      &lt;td&gt;17th August - 23rd August&lt;/td&gt;
      &lt;td&gt;Navigation2 with custom robot controller&lt;/td&gt;
      &lt;td&gt;Created new custom robot controller structure, Behaviour tress to include load pallet, FollowTarget plugin&lt;/td&gt;
      &lt;td&gt;#12 Creating a framework to add new new functionality with Nav2&lt;/td&gt;
      &lt;td&gt;Behaviour Trees&lt;/td&gt;
      &lt;td&gt;https://theroboticsclub.github.io/colab-gsoc2020-Shreyas_Gokhale/behaviour-trees&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 12&lt;/td&gt;
      &lt;td&gt;24th August - 30th August&lt;/td&gt;
      &lt;td&gt;Multirobot Environment with working collaboration&lt;/td&gt;
      &lt;td&gt;Setting parameters for nav2 plugins, Action client for multi robot collaboration , docker images&lt;/td&gt;
      &lt;td&gt;#1933 Nav2 local_costmap crash issues #11 Separate Action server for issuing action commands for robot controller&lt;/td&gt;
      &lt;td&gt;JdeMultiBot&lt;/td&gt;
      &lt;td&gt;https://theroboticsclub.github.io/colab-gsoc2020-Shreyas_Gokhale/jde-multibot&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 13&lt;/td&gt;
      &lt;td&gt;Final Submition&lt;/td&gt;
      &lt;td&gt;Designing exercsises and publishing&lt;/td&gt;
      &lt;td&gt;Creating videos of working exercises, Writing instructions, Final report and PRs&lt;/td&gt;
      &lt;td&gt;#585 JdeRobot/RoboticsAcademy, #19, #23  JdeRobot/CustomRobots&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>Shreyas Gokhale</name><email>me@shreyasgokhale.com</email></author><category term="evaluation" /><summary type="html">GSoC Phase 3 Report</summary></entry><entry><title type="html">JdeMultibot</title><link href="http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/jde-multibot" rel="alternate" type="text/html" title="JdeMultibot" /><published>2020-08-27T01:00:00+02:00</published><updated>2020-08-27T01:00:00+02:00</updated><id>http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/jde-multibot</id><content type="html" xml:base="http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/jde-multibot">&lt;blockquote&gt;
  &lt;p&gt;Issues Solved:&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/ros-planning/navigation2/issues/1933&quot;&gt;#1933&lt;/a&gt; Nav2 local_costmap crash issues&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/TheRoboticsClub/colab-gsoc2020-Shreyas_Gokhale/issues/11&quot;&gt;#11&lt;/a&gt; Separate Action server for issuing action commands for robot controller&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/TheRoboticsClub/colab-gsoc2020-Shreyas_Gokhale/issues/9&quot;&gt;#9&lt;/a&gt; Multi Robot Discussion&lt;/p&gt;

&lt;/blockquote&gt;

&lt;h1 id=&quot;week-12-blog&quot;&gt;Week 12 Blog&lt;/h1&gt;

&lt;p&gt;After ~12 weeks of non-stop code marathon, we have now arrived at the very last leg of the GSoC journey. The goal of this summer: &lt;em&gt;“To create a multirobot exercise in ROS2”&lt;/em&gt; is now almost achieved. This week, we will dive into the nitty gritty details of our code, how ROS2 and Navigation2 are configured and all the things that you need to know before you can start working on solving the exercises. This week’s post will a bit lengthy, so bear with me.&lt;/p&gt;

&lt;h3 id=&quot;fixing-last-weeks-problems&quot;&gt;Fixing last week’s problems&lt;/h3&gt;

&lt;p&gt;After investigating why my simulation was crashing when local costmap was set, I finally found the reason.&lt;/p&gt;

&lt;p&gt;The usual suspect: Gazebo
&lt;img src=&quot;assets/blog-images/week-12/always-has-been-meme.jpeg&quot; alt=&quot;No gazebo devs, I don't blame you. The fault was in my config&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Gazebo didn’t publish the clock, which made everything useless as &lt;code class=&quot;highlighter-rouge&quot;&gt;use_sim_time&lt;/code&gt; was set to true. A quick fix in my config launch file and this was okay. But it didn’t solve everything.&lt;/p&gt;

&lt;p&gt;The second problem was the map itself. When robot travelled in our old warehouse world, it always used to travel more than that shown in RViz, which I don’t fully understand why. (My guess: The old map was huge and this might have added a lot of latency between Navigation2 output and response from Gazebo). This meant that it always used to miss the goals/ crash into objects, even with valid costmaps. After considering every option that I had at this time ( we will have a discussion about SLAM and map later in this blog), I went with selecting a completely new world where navigation works quite predictably. One added benefit: This world is actually from amazon! It is the &lt;a href=&quot;https://github.com/aws-robotics/aws-robomaker-small-warehouse-world&quot;&gt;warehouse world from aws&lt;/a&gt;, &lt;a href=&quot;https://github.com/shreyasgokhale/aws-robomaker-small-warehouse-world&quot;&gt;ported and modified&lt;/a&gt; by me a bit to suit our purpose. It has some real life warehouse elements to it: Stray piles of boxes, big trays to keep stock etc. It is not perfect, but usable for now.&lt;/p&gt;

&lt;p&gt;After tweaking some navigation parameters, everything seemed to work okay-ish. Phew.. Now we have Single and Multi robot exercises in ROS2 almost ready! After finishing up the walkthroughs, they will be published shortly on the Jderobot Academy website. For now, here is a sneak preview of what the warehouse and robot looks like:&lt;/p&gt;

&lt;div class=&quot;embed-container&quot;&gt;
  &lt;iframe src=&quot;https://www.youtube.com/embed/RxAlkDKQ23Y&quot; width=&quot;700&quot; height=&quot;480&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Before we rush to try it out, let’s go back to the basics and try to understand how the exercise is structured around.&lt;/p&gt;

&lt;h2 id=&quot;single-amazon-robot-package&quot;&gt;Single amazon robot package&lt;/h2&gt;

&lt;p&gt;If we look at our directory structure, we will see following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
├── amazon_robot_bringup
├── amazon_robot_controller
├── amazon_robot_description
├── amazon_robot_gazebo
├── amazon_robot_msg
├── amazon_robot_rviz_plugins
├── aws-robomaker-small-warehouse-world
├── docker
├── docker-compose.yaml
├── README.md
└── start_simulation.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we discussed the last time, the &lt;code class=&quot;highlighter-rouge&quot;&gt;amazon_robot_controller&lt;/code&gt; is the heart of our operations. But what about other packages?&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;amazon_robot_bringup&lt;/code&gt; holds the startup scripts. We will come back to this later&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;amazon_robot_description&lt;/code&gt; has &lt;code class=&quot;highlighter-rouge&quot;&gt;.urdf&lt;/code&gt; files which are used by &lt;code class=&quot;highlighter-rouge&quot;&gt;robot_state_publisher&lt;/code&gt; . Robot states are quite important as every link and joint in the robot is described in some relation with other links and joints, ultimately coming back to the &lt;code class=&quot;highlighter-rouge&quot;&gt;base_link&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;amazon_robot_gazebo&lt;/code&gt; has &lt;code class=&quot;highlighter-rouge&quot;&gt;.sdf&lt;/code&gt; models of our robot and also other objects. These files are used by gazebo to simulate a robot, it’s sensors, other objects etc. These files also simulate behaviours, for example actuation behaviour of prismatic joint in our amazon robot.  They are quite important if you are creating a robot by yourself but for now, we just have to keep in mind that we are using &lt;code class=&quot;highlighter-rouge&quot;&gt;amazon_robot2&lt;/code&gt; as our model.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;amazon_robot_msg&lt;/code&gt; are custom ros messages. In our case, this describes the action message &lt;code class=&quot;highlighter-rouge&quot;&gt;FollowTargets&lt;/code&gt; that we use to send targets to our robot.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;amazon_robot_rviz_plugins&lt;/code&gt; are, as the name suggests, rviz plugins which describe our rviz window. We are going to use rviz for setting initial pose, sending goals, sending waypoints and this library handles it.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aws-robomaker-small-warehouse-world&lt;/code&gt; is a new addition. When experimenting, we noticed that our old warehouse map model doesn’t give correct results with Navigation2. Hence, we tried to swap it with a brand new world from actual amazon itself. It was released just a month ago and it is quite a faithful representation. We have modified it with our pallets and it is suitable for both: single and multi robot exercise.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt; is for all the docker related files.&lt;/p&gt;

&lt;p&gt;Yes, both NVIDIA and Intel are supported. Nvidia guys, just run the following command&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xhost +&lt;span class=&quot;s2&quot;&gt;&quot;local:docker@&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;DISPLAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DISPLAY&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$XSOCK&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$XSOCK&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.Xauthority:/root/.Xauthority  &lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;--net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;host &lt;span class=&quot;nt&quot;&gt;--gpus&lt;/span&gt; all amazon_robot_amazon-exercise:latest /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;Now that we know the overall architecture, I want to explain to you what happens when you launch an exercise using one of the bringup files.&lt;/p&gt;

&lt;p&gt;Let’s take an example of  &lt;code class=&quot;highlighter-rouge&quot;&gt;amazon_robot_in_aws_world.py&lt;/code&gt; file (&lt;code class=&quot;highlighter-rouge&quot;&gt;amazon_robot/amazon_robot_bringup/bringup/launch/amazon_robot_in_aws_world.py&lt;/code&gt; ) which we use to launch the single robot exercise:&lt;/p&gt;

&lt;p&gt;First few lines are basic imports and declaration of parameters.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ament_index_python.packages&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_package_share_directory&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate_launch_description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Use Simulation time from gazebo
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;use_sim_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LaunchConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'use_sim_time'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'true'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;# Our bringup location
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;amazon_gazebo_package_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_package_share_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'amazon_robot_gazebo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;amazon_gazebo_package_launch_dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amazon_gazebo_package_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'launch'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;amazon_description_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_package_share_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'amazon_robot_description'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;this_launch_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;realpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__file__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Create the launch configuration variables
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;slam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LaunchConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'slam'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LaunchConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'namespace'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;use_namespace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LaunchConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'use_namespace'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;map_yaml_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LaunchConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'map'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;use_sim_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LaunchConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'use_sim_time'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice how we are mentioning our own custom packages. Now we come to some important lines&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Map
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;declare_map_yaml_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DeclareLaunchArgument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'map'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;default_value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amazon_bringup_package_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'maps'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'aws_warehouse'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'map.yaml'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Full path to map file to load'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This launches our pre made map. This &lt;code class=&quot;highlighter-rouge&quot;&gt;map.yaml&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;map.pgm&lt;/code&gt; file is 2D gridmap representation of our environment. In an unknown environment, we can use SLAm ang generate our own map.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;declare_params_file_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DeclareLaunchArgument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'params_file'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;default_value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amazon_bringup_package_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'params'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'nav2_params_with_control.yaml'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Full path to the ROS2 parameters file to use for all launched nodes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is our parameter file for navigation2, located at &lt;code class=&quot;highlighter-rouge&quot;&gt;amazon_robot/amazon_robot_bringup/bringup/params/nav2_params_with_control.yaml&lt;/code&gt; . It looks something like this&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;amcl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ros__parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;use_sim_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alpha1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alpha2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alpha3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alpha4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;alpha5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;base_frame_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;base_footprint&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;beam_skip_distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;beam_skip_error_threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.9&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;beam_skip_threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;do_beamskip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;global_frame_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;map&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lambda_short&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;controller_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ros__parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;use_sim_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;controller_frequency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;20.0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;min_x_velocity_threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.001&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;min_y_velocity_threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;min_theta_velocity_threshold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.001&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;progress_checker_plugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;progress_checker&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;goal_checker_plugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;goal_checker&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;controller_plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FollowPath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;robot_controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ros__parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;use_sim_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;controller_bt_xml_filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;follow_waypoints_and_load.xml&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plugin_lib_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nav2_wait_action_bt_node&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nav2_recovery_node_bt_node&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nav2_navigate_to_pose_action_bt_node&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amazon_robot_get_next_goal_action_bt_node&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amazon_robot_all_goals_achieved_condition_bt_node&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amazon_robot_load_pallet_action_bt_node&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This file is basically a representation of all the buttons of various components of the navigation stack that you can tweak. You can set the publish frequency high to update maps faster on the cost of higher compute power or set if either Lidar or 2d Pointcloud is used for creating costmap. For more information, have a look at the navigation2 documentation where the parameters are described quite neatly.&lt;/p&gt;

&lt;p&gt;Did you notice the last &lt;code class=&quot;highlighter-rouge&quot;&gt;robot_controller&lt;/code&gt; node? That is our own custom robot controller node with it’s own parameters. For example, in multirobot exercise, I send the robot name to the controller using &lt;code class=&quot;highlighter-rouge&quot;&gt;robot_name: &quot;robot2&quot;&lt;/code&gt; parameter. It also specifies what behaviour tree is going to be used by our controller. In our case it is &lt;code class=&quot;highlighter-rouge&quot;&gt;follow_waypoints_and_load.xml&lt;/code&gt;. So, how does it look like?&lt;/p&gt;

&lt;p&gt;The file, located at &lt;code class=&quot;highlighter-rouge&quot;&gt;amazon_robot/amazon_robot_controller/behavior_trees/follow_waypoints_and_load.xml&lt;/code&gt; describes how our robot is going to function. We have already discussed how behaviour trees work with nav2, but let’s go through our demo.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;root&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;main_tree_to_execute=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MainTree&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;BehaviorTree&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MainTree&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ReactiveFallback&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FollowTargets&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;AllGoalsAchieved&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;goal_achieved=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{goal_achieved}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;KeepRunningUntilFailure&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ReactiveSequence&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;GetNextGoal&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;goals=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{goals}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;goal=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{goal}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;goal_achieved=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{goal_achieved}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;NavigateToPose&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;goal=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{goal}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;server_name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navigate_to_pose&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;server_timeout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;LoadPallet&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;load_queue=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{load_queue}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;SetBlackboard&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;output_key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;goal_achieved&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ReactiveSequence&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/KeepRunningUntilFailure&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ReactiveFallback&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/BehaviorTree&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our main node is &lt;code class=&quot;highlighter-rouge&quot;&gt;FollowTargets&lt;/code&gt;, which is also the name of our ros action. &lt;code class=&quot;highlighter-rouge&quot;&gt;FollowTargets&lt;/code&gt; runs until our goals are complete. If we open our tree in &lt;a href=&quot;https://github.com/BehaviorTree/Groot&quot;&gt;Groot&lt;/a&gt;, it looks like following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/blog-images/week-12/behaviour-tree.png&quot; alt=&quot;Behaviour Tree&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The tree structure is quite explanatory by itself. It follows the execution from left to right. We start executing waypoints one by one. &lt;code class=&quot;highlighter-rouge&quot;&gt;NavigateToPose&lt;/code&gt; loads its own subtree to compute path to a pose and navigate to it. Once it reaches at the destination, &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadPallet&lt;/code&gt; node is activated and it loads or unloads our lift.
We can also edit the BT structure, the way we want. For example, if we need more waiting time, we can add &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Wait wait_duration=&quot;5&quot;/&amp;gt;&lt;/code&gt; to the tags, and so on. More on that in the next blog.&lt;/p&gt;

&lt;p&gt;Coming back to our launch script, now we are actually going to launch some nodes&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;start_gazebo_server_cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecuteProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IfCondition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use_simulator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gzserver'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--verbose'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'-s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'libgazebo_ros_init.so'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'-s'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'libgazebo_ros_factory.so'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'-s'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'libgazebo_ros_force_system.so'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cwd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this_launch_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'screen'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The plugins are &lt;code class=&quot;highlighter-rouge&quot;&gt;libgazebo_ros_init.so&lt;/code&gt; for initializing clock (Yes! that was the missing part from last week’s exercise), &lt;code class=&quot;highlighter-rouge&quot;&gt;libgazebo_ros_factor.so&lt;/code&gt; for spawning robot and &lt;code class=&quot;highlighter-rouge&quot;&gt;libgazebo_ros_force_system.so&lt;/code&gt; for applying joint force on our prismatic joint.&lt;/p&gt;

&lt;p&gt;After this, make a choice, should we run SLAM or should we run the localization&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/1CNsm9ZkHF0m4/source.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, it is not so straightforward. For our exercise, we are moving things around. And not just some tiny stuff, big pallets which are almost 4 times the size of our robot. Hence, moving will affect our map in a big way. Usually, when we use static maps for localization, the objects in the map are fixed. Hence, if we move something, and it is still represented at it’s old position in the map, the &lt;code class=&quot;highlighter-rouge&quot;&gt;amcl&lt;/code&gt; localizer won’t be much happy with this. The particle swarm is much dispersed and we can lose lock on our current position and get thrown away in some random corner of the map. This is exactly what happens sometimes now.&lt;/p&gt;

&lt;p&gt;But if we want to use SLAM in ROS2, there is no other reliable package available than SLAM Toolbox. However, currently there are some issues with the LIDAR driver that we are using (rplidar from tb3 😪), so we can’t use that either. So we are stuck using some static map with localization and hope for the best that it works. We go ahead and load up the localization script, which loads the aws world that we described previously.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bringup_cmd &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; IncludeLaunchDescription&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        PythonLaunchDescriptionSource&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;os.path.join&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;amazon_bringup_package_dir, &lt;span class=&quot;s1&quot;&gt;'launch'&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;'bringup_launch.py'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;,
        &lt;span class=&quot;nv&quot;&gt;launch_arguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'namespace'&lt;/span&gt;: namespace,
                          &lt;span class=&quot;s1&quot;&gt;'use_namespace'&lt;/span&gt;: use_namespace,
                          &lt;span class=&quot;s1&quot;&gt;'slam'&lt;/span&gt;: slam,
                          &lt;span class=&quot;s1&quot;&gt;'map'&lt;/span&gt;: map_yaml_file,
                          &lt;span class=&quot;s1&quot;&gt;'use_sim_time'&lt;/span&gt;: use_sim_time,
                          &lt;span class=&quot;s1&quot;&gt;'params_file'&lt;/span&gt;: params_file,
                          &lt;span class=&quot;s1&quot;&gt;'default_bt_xml_filename'&lt;/span&gt;: default_bt_xml_filename,
                          &lt;span class=&quot;s1&quot;&gt;'autostart'&lt;/span&gt;: autostart&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;.items&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now the only thing left for us to do is spawn our robot! Keep in mind that namespacing and renaming the topics is handled by this script and you have to make sure that we are not duplicating any topics/actions/services when launching two robots&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;spawn_robot_cmd &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; IncludeLaunchDescription&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
                PythonLaunchDescriptionSource&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;os.path.join&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;amazon_bringup_package_dir, &lt;span class=&quot;s1&quot;&gt;'launch'&lt;/span&gt;,
                                                        &lt;span class=&quot;s1&quot;&gt;'spawn_tb3_launch.py'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;,
                &lt;span class=&quot;nv&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;IfCondition&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;spawn_robot&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,
                &lt;span class=&quot;nv&quot;&gt;launch_arguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;
                                &lt;span class=&quot;s1&quot;&gt;'x_pose'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'0'&lt;/span&gt;,
                                &lt;span class=&quot;s1&quot;&gt;'y_pose'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'0'&lt;/span&gt;,
                                &lt;span class=&quot;s1&quot;&gt;'z_pose'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'0'&lt;/span&gt;,
                                &lt;span class=&quot;s1&quot;&gt;'robot_name'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'amazon_robot'&lt;/span&gt;
                                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;.items&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Boom! Soon enough our robots will be yeeted in the warehouse world, ready to be initialized and tasked. In case of multi-robot, two navigation stacks will be launched. You can see more details about how this looks in the last blog! Feel free to explore related scripts and parameters in order to understand more about the system.&lt;/p&gt;

&lt;p&gt;Now, because you stuck with me for the entirety of this blog, I have a little surprize for you. Here is the video two robots, in our warehouse, collaborating with each other in a plan (and failing miserably in the end!). But the system is working exactly as it is expected to do.&lt;/p&gt;

&lt;div class=&quot;embed-container&quot;&gt;
  &lt;iframe src=&quot;https://www.youtube.com/embed/PTdZGqW39xE&quot; width=&quot;700&quot; height=&quot;480&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;In the next blog, the exercises will be introduced and will be demonstrated! Until then!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;いって来ます!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name>Shreyas Gokhale</name><email>me@shreyasgokhale.com</email></author><category term="amazon-warehouse-robot" /><category term="multirobot" /><category term="exercise" /><category term="gazebo" /><category term="ros2" /><category term="nav2" /><category term="joint" /><category term="week-12" /><summary type="html">Issues Solved: #1933 Nav2 local_costmap crash issues #11 Separate Action server for issuing action commands for robot controller #9 Multi Robot Discussion</summary></entry><entry><title type="html">Behaviour Trees</title><link href="http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/behaviour-trees" rel="alternate" type="text/html" title="Behaviour Trees" /><published>2020-08-17T13:30:00+02:00</published><updated>2020-08-17T13:30:00+02:00</updated><id>http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/behaviour-trees</id><content type="html" xml:base="http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/behaviour-trees">&lt;blockquote&gt;
  &lt;p&gt;Issues Pending:&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/ros-planning/navigation2/issues/1933&quot;&gt;#1933&lt;/a&gt; Nav2 local_costmap crash issues&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/TheRoboticsClub/colab-gsoc2020-Shreyas_Gokhale/issues/11&quot;&gt;#11&lt;/a&gt; Separate Action server for issuing action commands for robot controller&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/TheRoboticsClub/colab-gsoc2020-Shreyas_Gokhale/issues/9&quot;&gt;#9&lt;/a&gt; Multi Robot Discussion&lt;/p&gt;

  &lt;p&gt;Issues Solved:&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/TheRoboticsClub/colab-gsoc2020-Shreyas_Gokhale/issues/12&quot;&gt;#12&lt;/a&gt; Creating a framework to add new new functionality with Nav2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;week-11-blog&quot;&gt;Week 11 Blog&lt;/h1&gt;

&lt;p&gt;The last week was certainly one of the most happening ones (and in my opinion, the most challenging one) The joy you get when your code works after endless hours of debugging is amazing, but sadly that didn’t last long. Although we have everything ready which we need, the navigation2 integration has some creases which we need to iron out.&lt;/p&gt;

&lt;p&gt;Before we go to the development part of our exercise, I want you to get a feel of how it is working. So lets do a quick dry run.&lt;/p&gt;

&lt;h2 id=&quot;dry-run&quot;&gt;Dry run&lt;/h2&gt;

&lt;p&gt;Start by cloning the repo. If you are debugging, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;foxy-devel&lt;/code&gt;  branch of &lt;a href=&quot;https://github.com/shreyasgokhale/CustomRobots.git&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/shreyasgokhale/CustomRobots.git&lt;/code&gt;&lt;/a&gt; . But if you just want to see how everything is working, clone &lt;a href=&quot;https://github.com/shreyasgokhale/Amazon-Robot.git&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;https://github.com/shreyasgokhale/Amazon-Robot.git&lt;/code&gt;&lt;/a&gt;  and run&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;xhost +&lt;span class=&quot;s2&quot;&gt;&quot;local:docker@&quot;&lt;/span&gt; 
docker-compose up &lt;span class=&quot;nt&quot;&gt;--build&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This fetches everything using docker and runs &lt;code class=&quot;highlighter-rouge&quot;&gt;amazon_warehouse_world.py&lt;/code&gt; launch file.  To make it easier, everything is organised from our bringup directory. This file, launches other files and nodes and so on. In the end you will see the familiar RViz and Gazebo Windows. It will take a while to load, have some patience 😅. Finally, once everything is ready, localize our robot in approximate position of the map.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/blog-images/week-11/UninitalizedRViz.png&quot; alt=&quot;Uninitalized RVIZ&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;code class=&quot;highlighter-rouge&quot;&gt;2D Pose estimate&lt;/code&gt; button and estimate our pose on the map. Approximate is fine. This will initialize our nav stack. Then, click on &lt;code class=&quot;highlighter-rouge&quot;&gt;waypoint mode&lt;/code&gt; and estimate the pose again. This time, it will initialize our plugin. Then, set your pickup and dropoff points using &lt;code class=&quot;highlighter-rouge&quot;&gt;Navigation Goal&lt;/code&gt; button and click on &lt;code class=&quot;highlighter-rouge&quot;&gt;Start Navigation&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/blog-images/week-11/SetNav.gif&quot; alt=&quot;Gazebo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/blog-images/week-11/gazebo.png&quot; alt=&quot;Gazebo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The robot will start moving. When it reaches our first goal point, it will actuate the lift joint to &lt;code class=&quot;highlighter-rouge&quot;&gt;Load&lt;/code&gt; position- making the pallet loaded on the robot. It will go on to the next point and unload the pallet.&lt;/p&gt;

&lt;div class=&quot;embed-container&quot;&gt;
  &lt;iframe src=&quot;https://www.youtube.com/embed/F1WELXcg364&quot; width=&quot;700&quot; height=&quot;480&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Is your robot stuck and never reaches the goal? That is because we don’t have a costmap! Why you ask? There is a bug in the repo which crashes the controller when we have a working local costmap! We are trying to fix it soon.&lt;/p&gt;

&lt;p&gt;Okay, what just happened? For that, we need to understand what are behaviour trees and how our code is structured.&lt;/p&gt;

&lt;h2 id=&quot;understanding-the-core-structure&quot;&gt;Understanding the core structure&lt;/h2&gt;

&lt;p&gt;Let’s start with design choices that we had for making our use case.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;The quick and easy (but not ideal) one:&lt;/strong&gt;  We can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;NavigateToPose&lt;/code&gt; action supplied by Navigation2 to just send goals to the robots. Then we handle everything else (loading pallets, planning) in our central planner by issuing commands to each robot. This is not a bad choice, but we don’t leverage the capabilities of behaviour trees in this case.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;The not-so-quick (and easy) one:&lt;/strong&gt; Creating our custom behaviour tree nodes paired with the plugins and node behaviours. We can leverage &lt;code class=&quot;highlighter-rouge&quot;&gt;NavigateToPose&lt;/code&gt; behaviour tree node in order to create even a bigger behaviour tree. We can expand this with various conditional and decision nodes in additions to the action plugins, making it even more complex. This way, we can embed our robot behaviour in the tree itself. But this is &lt;em&gt;significantly&lt;/em&gt; more convoluted in terms of software.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As our repo will be used as a reference to create more ROS2 navigation Robots and behaviours, we decided to go with the second one. Now summing all of our previous developments (blogs &lt;a href=&quot;https://theroboticsclub.github.io/colab-gsoc2020-Shreyas_Gokhale/two-x&quot;&gt;2x&lt;/a&gt; and &lt;a href=&quot;https://theroboticsclub.github.io/colab-gsoc2020-Shreyas_Gokhale/finding-the-way&quot;&gt;Finding The Way&lt;/a&gt; ), we can define a final end goals for our system:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A self contained amazon robot package which includes all the gazebo worlds, models, launch files, navigation controllers, plugins and other necessary components to be able to launch a complete amazon warehouse scenario.&lt;/li&gt;
  &lt;li&gt;The warehouse scenario can demonstrate loading up of pallets from pick up zones and placing them in the drop off zones. Our custom robot uses it’s lift joint which actuates using gazebo services for loading.&lt;/li&gt;
  &lt;li&gt;The behaviours of robot: loading, drop-off, navigating, recovering from situations are all explained using behaviour trees: which we can edit, modify, and change according to our scenario.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ros-planning/navigation2/tree/master/nav2_behavior_tree&quot;&gt;nav2_behaviour_tree&lt;/a&gt;  is the template package which offers a way of including externally created behaviour trees into navigation2. We will be leveraging the &lt;code class=&quot;highlighter-rouge&quot;&gt;NavigateToPose&lt;/code&gt; node of behaviour tree to include it in our own behaviour tree and node packages.  This node will be called as &lt;code class=&quot;highlighter-rouge&quot;&gt;FollowTargets&lt;/code&gt; . If you also want to create you own custom behaviours depending on Navigation2, then following writeup might also help you. So let’s begin,&lt;/p&gt;

&lt;h2 id=&quot;creating-followtargets-and-corresponding-nodes&quot;&gt;Creating &lt;code class=&quot;highlighter-rouge&quot;&gt;FollowTargets&lt;/code&gt; and corresponding nodes&lt;/h2&gt;

&lt;p&gt;In order to create our very own  node, we need 3 things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;ROS2 action corresponding to our node&lt;/li&gt;
  &lt;li&gt;Behaviour tree which implements this node&lt;/li&gt;
  &lt;li&gt;C++ source and header files showcasing its usage.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But what controls the robot? In our case, this will be done by a common task planner. This centralised planner will issue tasks to the robot and will keep a track of things.&lt;/p&gt;

&lt;p&gt;Don’t get confused! We have an action server representing our robot’s &lt;code class=&quot;highlighter-rouge&quot;&gt;FollowTarget&lt;/code&gt; action. This makes our planner an action client for the robot. But in big order of things, our robot is essentially a service to the centralized planner and it is the centralized planner who calls the shots. Hence, architecturally, the planner &lt;em&gt;acts&lt;/em&gt; as a server which issues goals for our robot.  For starting out, we will be using rviz plugins for our action client but the task of the reader is to implement one by their own.&lt;/p&gt;

&lt;p&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;FollowTarget&lt;/code&gt; node will accept list of poses and their corresponding load/unload action as an input.( see action message) The string will dictate what action we have to perform (= load or unload). As we evolve our application further, we will include more complex behaviours such as different actions and ability to add stops. For now, we already have a quite a lot to do.&lt;/p&gt;

&lt;h3 id=&quot;amazon-robot-controller&quot;&gt;Amazon Robot Controller&lt;/h3&gt;

&lt;p&gt;Controller is heart of our operations. It is, in essence, an action server which works with our behaviour trees. Also, it is a lifecycle node in ROS2 terms which is managed by &lt;code class=&quot;highlighter-rouge&quot;&gt;nav2_lifecycle_manager&lt;/code&gt;. These nodes start as unconfigured and they have different stages of operation. At times, for example &lt;code class=&quot;highlighter-rouge&quot;&gt;on_activate&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;on_destoy&lt;/code&gt; , appropriate functions are called to felicitate the cause. Our robot controller also registers our &lt;code class=&quot;highlighter-rouge&quot;&gt;FollowTarget&lt;/code&gt; action server.&lt;/p&gt;

&lt;p&gt;For our custom behaviours, we will be implementing our own plugins. Consider the example of one such implemented plugin: &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadPallet&lt;/code&gt; . In &lt;code class=&quot;highlighter-rouge&quot;&gt;amazon_robot/amazon_robot_controller/plugins/action/load_pallet.cpp&lt;/code&gt; , you will find the code related the plugin. It is called in the way our behaviour tree is arranged in &lt;code class=&quot;highlighter-rouge&quot;&gt;amazon_robot/amazon_robot_controller/behavior_trees/follow_waypoints_and_load.xml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To Be Continued…&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Eis to epanideín!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name>Shreyas Gokhale</name><email>me@shreyasgokhale.com</email></author><category term="amazon-warehouse-robot" /><category term="exercise" /><category term="gazebo" /><category term="ros2" /><category term="nav2" /><category term="joint" /><category term="week-11" /><summary type="html">Issues Pending: #1933 Nav2 local_costmap crash issues #11 Separate Action server for issuing action commands for robot controller #9 Multi Robot Discussion Issues Solved: #12 Creating a framework to add new new functionality with Nav2</summary></entry><entry><title type="html">2x !</title><link href="http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/two-x" rel="alternate" type="text/html" title="2x !" /><published>2020-08-08T01:30:00+02:00</published><updated>2020-08-08T01:30:00+02:00</updated><id>http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/two-x</id><content type="html" xml:base="http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/two-x">&lt;blockquote&gt;
  &lt;p&gt;Issues Resloved:&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/TheRoboticsClub/colab-gsoc2020-Shreyas_Gokhale/issues/10&quot;&gt;#10&lt;/a&gt; Gazebo Import
&lt;a href=&quot;https://github.com/JdeRobot/CustomRobots/issues/7&quot;&gt;#7&lt;/a&gt; ROS2 Amazon Robot model
&lt;a href=&quot;https://github.com/IntelligentRoboticsLabs/ros2_planning_system_examples/issues/1&quot;&gt;#1&lt;/a&gt; ROS2 planning system example bugfix&lt;/p&gt;

&lt;/blockquote&gt;

&lt;h1 id=&quot;week-10-blog&quot;&gt;Week 10 blog&lt;/h1&gt;

&lt;p&gt;Last week we almost completed our brand new Amazon Robot exercise in Jderobot Academy, except for one very essential component: The lift. For our exercise to work as expected, we need to make sure that our lift can actuate and carry pallets to their places.  This is also quite important for the next exercise for multiple robots.&lt;/p&gt;

&lt;h3 id=&quot;gazebo-model-fixes-and-writing-action-plugin&quot;&gt;Gazebo model fixes and writing action plugin&lt;/h3&gt;

&lt;p&gt;One of the problem that we were facing was the &lt;code class=&quot;highlighter-rouge&quot;&gt;lift_joint&lt;/code&gt; kept dropping on the floor. If you set the type of joint anything other than a prismatic one, it stayed in the place. I found this rather strange and I spent literally days figuring out what is going wrong with this. There are no examples or snippets to help you and the documentation itself is incomplete. Moreover, no one replied to my questions on ROS and Gazebo sim. So I had no hopes about it working. But one day, suddenly, I remembered that maybe adding &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;physics&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;dynamics&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ode&amp;gt;&lt;/code&gt; tags might do the trick, and it did! I am going to put my lift joint here in case anyone faces the similar problems.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;joint&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lift_joint&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prismatic&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;link_platform_mid&lt;span class=&quot;nt&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;child&amp;gt;&lt;/span&gt;lift_link&lt;span class=&quot;nt&quot;&gt;&amp;lt;/child&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;axis&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;xyz&amp;gt;&lt;/span&gt;0 0 1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/xyz&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;limit&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;lower&amp;gt;&lt;/span&gt;0.18&lt;span class=&quot;nt&quot;&gt;&amp;lt;/lower&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;upper&amp;gt;&lt;/span&gt;0.25&lt;span class=&quot;nt&quot;&gt;&amp;lt;/upper&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;effort&amp;gt;&lt;/span&gt;20&lt;span class=&quot;nt&quot;&gt;&amp;lt;/effort&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;velocity&amp;gt;&lt;/span&gt;5.89&lt;span class=&quot;nt&quot;&gt;&amp;lt;/velocity&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/limit&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;dynamics&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;damping&amp;gt;&lt;/span&gt;0.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/damping&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;friction&amp;gt;&lt;/span&gt;0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/friction&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;spring_reference&amp;gt;&lt;/span&gt;0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/spring_reference&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;spring_stiffness&amp;gt;&lt;/span&gt;0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/spring_stiffness&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dynamics&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;use_parent_model_frame&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/use_parent_model_frame&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/axis&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;physics&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;provide_feedback&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/provide_feedback&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;ode&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;provide_feedback&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/provide_feedback&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;implicit_spring_damper&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/implicit_spring_damper&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;cfm_damping&amp;gt;&lt;/span&gt;1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/cfm_damping&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;limit&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;cfm&amp;gt;&lt;/span&gt;0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/cfm&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;erp&amp;gt;&lt;/span&gt;0.2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/erp&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/limit&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ode&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/physics&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/joint&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once that problem was solved, the next challenge was how to actuate this joint. We want to lift up the platform when picking up the pallet and then drop it down when it reaches the goal area. Traditionally, in ROS1, &lt;code class=&quot;highlighter-rouge&quot;&gt;gazebo_plugins&lt;/code&gt; are used for this. We apply effort to this joint using a ros service and the plugin handles it. For this we need to make sure that there are &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;transmission&amp;gt;&lt;/code&gt; tags in the model. (If you want more information on how to do that in ROS1, have a look at &lt;a href=&quot;https://github.com/JdeRobot/CustomRobots/blob/master/amazon_robot/amazon_robot_description/urdf/amazon_warehouse_robot.transmission.xacro&quot;&gt;this&lt;/a&gt; file).&lt;/p&gt;

&lt;p&gt;But in ROS2, this structure is changed a bit. &lt;a href=&quot;https://github.com/ros-simulation/gazebo_ros_pkgs/wiki/ROS-2-Migration:-gazebo_ros_api_plugin&quot;&gt;This&lt;/a&gt; sheds more light on how the migration was performed and the changes to respective package. We are interested in applying joint effort, which pushes the link using ros service. I was able to find it’s changelog &lt;a href=&quot;https://github.com/ros-simulation/gazebo_ros_pkgs/wiki/ROS-2-Migration:-Body-Wrench-and-Joint-Effort&quot;&gt;here&lt;/a&gt;. After some digging around, I found a snippet of code in the source file, which worked!&lt;/p&gt;

&lt;p&gt;We can actuate the joint using following service. Positive effort to move up and negative effort to return to the position&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ros2 service call /apply_joint_effort gazebo_msgs/srv/ApplyJointEffort &lt;span class=&quot;s1&quot;&gt;'{joint_name: &quot;lift_joint&quot;, effort: -2.0, start_time: {sec: 0, nanosec: 0}, duration: {sec: 2000, nanosec: 0} }'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Apart from that, I had to make changes in how our model is getting deployed and the &lt;code class=&quot;highlighter-rouge&quot;&gt;urdf&lt;/code&gt; for robot state description. In the end now everything works. But the arrangement of the warehouse is slightly not so ideal for our setup. We are using amcl which just tries to localize on given map using probabilistic localisation. For real time moving objects (for example, our pallets) we need SLAM. But moving on for now.&lt;/p&gt;

&lt;div class=&quot;embed-container&quot;&gt;
  &lt;iframe src=&quot;https://www.youtube.com/embed/n9NwqWQGTmc&quot; width=&quot;700&quot; height=&quot;480&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;jdemultrobot&quot;&gt;JdeMultRobot&lt;/h2&gt;

&lt;p&gt;With simple robot exercise is ready to be used, so I turned my focus to the final goal: ‘JdeMultiBot’. For multi robot, we had a lot of discussion over the architecture and it’s implementation &lt;a href=&quot;https://github.com/TheRoboticsClub/colab-gsoc2020-Shreyas_Gokhale/issues/9&quot;&gt;over a github issue&lt;/a&gt;. The synopsis was follows:&lt;/p&gt;

&lt;h2 id=&quot;proposal-for-multi-robot-exercise&quot;&gt;&lt;strong&gt;Proposal for Multi-Robot exercise&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The purpose of the multi robot exercise is to give student a platform to implement different strategies for task and path planning and subsequently, learn about the new Navigation2 structure. Thus, on the backend, the infrastructure must be set up so that the student has to code only the relevant logic / algorithm in a python function. There are 2 main responsibilities to be performed by the exercise backend:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Issuing task goals. For example &lt;em&gt;“Transfer pallets no: 2,5,8 from their current location to the pallet storage area”&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Mechanism to monitor overall state of the exercise. i.e. timely record of tasks completed by each robot.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We will be using Navigation2, which uses behaviour trees. We can use it’s &lt;a href=&quot;https://navigation.ros.org/concepts/index.html#planners&quot;&gt;planner&lt;/a&gt; for path planning and &lt;a href=&quot;https://navigation.ros.org/concepts/index.html#controllers&quot;&gt;controller&lt;/a&gt; for path following. However, we must also define our own task server which issues task goals.&lt;/p&gt;

&lt;p&gt;The above mentioned &lt;a href=&quot;https://github.com/atb033/multi_agent_path_planning&quot;&gt;repos&lt;/a&gt; can be used for the reference solution. In the beginning only 2 robots will be defined.&lt;/p&gt;

&lt;p&gt;The task planning BT node will supersede the existing navigation behaviour tree. On the robot side, we will have a node plugin, for example &lt;code class=&quot;highlighter-rouge&quot;&gt;GetTask&lt;/code&gt; which correlates to a node in behavior tree ( for example, get next task, where task is represented as a pose). This will be something similar to the &lt;a href=&quot;https://navigation.ros.org/configuration/packages/bt-plugins/actions/ComputePathToPose.html?highlight=computepathtopose&quot;&gt;ComputePathToPose&lt;/a&gt; which will return the Nav Goal (x,y,z) and if it is a pickup or dropoff. Then then robot can continue with its regular behaviour tree, to plan a path to this goal and navigate, check if it reached and then lift/drop the platform.&lt;/p&gt;

&lt;p&gt;But to give the task, a task planning server will be separate and the robot has to query for it. And this server must have already decided which robot has to do which task based on the algorithm. We can give a demo implementation but students can program the server in more elaborate way. The demo implementation can be as simple as picking a random pose out of pallet poses and drop locations.&lt;/p&gt;

&lt;p&gt;Nav2 already has planner, controller, recovery servers. We will add a task server. If we launch multiple robots, it already launches multiple instances of Nav2 task. So each robot has his own nav stack. And our server will have the similar structure that of other nav2 servers, for example using Ros actions etc.&lt;/p&gt;

&lt;p&gt;and we decided to work on following deliverables:&lt;/p&gt;

&lt;h2 id=&quot;deliverables-of-the-project&quot;&gt;&lt;strong&gt;Deliverables of the project&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;The Amazon Warehouse exercise will transition to ROS2 Foxy, resulting in two exercises. These exercises are focused in &lt;strong&gt;programming navigation and planning algorithms using ROS2&lt;/strong&gt;, and they can be addressed in a sequential manner:&lt;/p&gt;

&lt;h3 id=&quot;1-implement-the-navigation-stack-on-an-amazon-warehouse-robot&quot;&gt;&lt;strong&gt;1. Implement the navigation stack on an Amazon Warehouse Robot&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;ROS2 brings a neat evolution of the Navigation Stack, namely &lt;a href=&quot;https://github.com/ros-planning/navigation2&quot;&gt;Navigation2&lt;/a&gt;. This navigation system works as a stack which is deployed on a robot. It is composed by several action servers (Planner, Controller and Recovery), tied together by means of a customizable Behavior Tree. Depending on the current pose, environment, goal and programmed behavior, the Navigation2 system will provide the suitable trajectory towards the desired destination.&lt;/p&gt;

&lt;p&gt;The student will have to implement a Navigation2 BT in the simulated robot, as well as integrate it with the rest of the behavior (lift/drop a pallet).&lt;/p&gt;

&lt;h3 id=&quot;2-multirobot-coordination&quot;&gt;&lt;strong&gt;2. Multirobot coordination&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Once the navigation system has been implemented in a robot, the previous exercise can be extended to a multi-robot scenario, where several robots with independent navigation configuration (they might even implement different algorithms and/or plugins in the Navigation2 stack), a &lt;strong&gt;central planner&lt;/strong&gt; will be responsible of assigning the tasks (i.e., move pallet X to zone Y) to different robots. This central planner can leverage on the enhanced asynchronous infrastructure in ROS2 by means of an action server, on a similar approach that for Navigation2 servers. This assignment can be determined by many parameters, implementing approaches such as distance-based assignments, FIFO queues, random assignments, etc.&lt;/p&gt;

&lt;p&gt;The task of the student will be to program the assignment strategy in the central planner, determining the criteria for assigning the tasks among the available robots.&lt;/p&gt;

&lt;h3 id=&quot;multi-robot-navigation-2&quot;&gt;Multi Robot Navigation 2&lt;/h3&gt;

&lt;p&gt;When we launch multiple robots in Nav2, they are assigned their own independent stacks - Which means their own behaviour tree, servers, actions and everything is namespaced. This also means that the resource usage (CPU, RAM) also scales up and it can prove a bottleneck in future. We’ll have to see about that in upcoming weeks. Meanwhile, I’ve started working on the server architecture and I can’t wait to make it awesome! For now, I leave you guys with 2 robots deployed with their nav stacks in our exercise.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/blog-images/week-9/TwoRobots.jpeg&quot; alt=&quot;2 Amazon Robots&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Hej då!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name>Shreyas Gokhale</name><email>me@shreyasgokhale.com</email></author><category term="amazon-warehouse-robot" /><category term="exercise" /><category term="gazebo" /><category term="ros2" /><category term="nav2" /><category term="joint" /><category term="week-10" /><summary type="html">Issues Resloved: #10 Gazebo Import #7 ROS2 Amazon Robot model #1 ROS2 planning system example bugfix</summary></entry><entry><title type="html">Finding the way</title><link href="http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/finding-the-way" rel="alternate" type="text/html" title="Finding the way" /><published>2020-08-01T15:30:00+02:00</published><updated>2020-08-01T15:30:00+02:00</updated><id>http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/finding-the-way</id><content type="html" xml:base="http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/finding-the-way">&lt;blockquote&gt;
  &lt;p&gt;Issues Pending:&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/JdeRobot/CustomRobots/issues/7&quot;&gt;#7&lt;/a&gt; WIP for ROS2 Amazon Robot model&lt;/p&gt;

&lt;/blockquote&gt;

&lt;h1 id=&quot;week-9-blog&quot;&gt;Week 9 blog&lt;/h1&gt;

&lt;h2 id=&quot;navigation-2&quot;&gt;Navigation 2&lt;/h2&gt;

&lt;p&gt;This week, we are now finally able to launch the exercise, complete with navigation2! It is the successor of the navigation stack in ROS1 for ROS2 and it is build completely from ground up. Navigation2 also uses Behavior trees instead of the FSMs in move_base and they are much more intuitive and modern way of handling navigation tasks.&lt;/p&gt;

&lt;p&gt;Navigation2 already has an up to date and extensive documentation and a really nicely written paper. But if you are a video person, I’d advise watching the minutes of ROS working group meeting to get it started quickly.&lt;/p&gt;

&lt;div class=&quot;embed-container&quot;&gt;
  &lt;iframe src=&quot;https://www.youtube.com/embed/-MzsEykCXoU&quot; width=&quot;700&quot; height=&quot;480&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;The objective of the exercise is to understand ROS2 actions, behaviour trees and navigation stack. In the end you will be able drive the robot around and interact with it using our Jderobot GUI.&lt;/p&gt;

&lt;h3 id=&quot;ros-actions&quot;&gt;ROS Actions&lt;/h3&gt;

&lt;p&gt;Consider this scenario: You want to buy something, say a toothbrush, online. You find one which you like and now you want to order it. But you find out that the system wants you to go on the warehouse’s site and tell the admins that you need this particular item, then tell the packing station to pack it, then order delivery services to pick this package and then drop it at your doorstep, all by yourself. You will think that this is crazy as all you want is the package delivered and you really don’t care about the steps in between. Sure, you would &lt;em&gt;like&lt;/em&gt; to have updates regarding the shipment, but the whole purpose of ordering online is not to deal with the stuff in-between. Well, this is exactly what ROS action does.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://index.ros.org/doc/ros2/_images/Action-SingleActionClient.gif&quot; alt=&quot;ROS2 actions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Credits: &lt;a href=&quot;https://index.ros.org/doc/ros2/Tutorials/Understanding-ROS2-Actions/&quot;&gt;Actions Tutorial ROS2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ROS actions provide an interface which abstracts long, complex task from the node. You can program an &lt;em&gt;“Action Server”&lt;/em&gt; to accept requests of a task and return the result of the request once it is completed to the &lt;em&gt;“Action Client”&lt;/em&gt;. Meanwhile, you can also get updates regarding your request. Action client can also cancel or update your goal for the task.&lt;/p&gt;

&lt;p&gt;In Navigation 2, action servers are used to communicate with the highest level BT navigator through a &lt;code class=&quot;highlighter-rouge&quot;&gt;NavigateToPose&lt;/code&gt; action message. They are also used for the BT navigator to communicate with the subsequent smaller action servers to compute plans, control efforts, and recoveries. Each will have their own unique &lt;code class=&quot;highlighter-rouge&quot;&gt;.action&lt;/code&gt; type in &lt;code class=&quot;highlighter-rouge&quot;&gt;nav2_msgs&lt;/code&gt; package for interacting with the servers.&lt;/p&gt;

&lt;p&gt;For understanding it better, I’d definitely recommend the reader to have a look on the &lt;a href=&quot;http://design.ros2.org/articles/actions.html&quot;&gt;ROS2 action design&lt;/a&gt; and &lt;a href=&quot;https://index.ros.org/doc/ros2/Tutorials/Understanding-ROS2-Actions/&quot;&gt;ROS2 action tutorial&lt;/a&gt;. Our focus for this exercise will be to leverage ROS2 actions for Navigation2. For us to continue with the exercise, we need to understand one more concept: Behaviour Trees&lt;/p&gt;

&lt;h3 id=&quot;behaviour-trees&quot;&gt;Behaviour Trees&lt;/h3&gt;

&lt;p&gt;Navigation2 documentation explains behaviour trees the best, so I am just going to link it here. But in essence, it splits the whole operation of a robot into smaller behaviours in a specific structure governed by rules. For example, if we want to have a robot to play football, we can split it in different primitives such as run to the ball, dribble, shoot and these states are further divided into sub primitives. How we can change from one behaviour to another is also dependant on rules and what conditions are satisfied.&lt;/p&gt;

&lt;p&gt;Navigation 2 uses &lt;a href=&quot;https://www.behaviortree.dev/&quot;&gt;BehaviorTree&lt;/a&gt; CPP V3 as the behaviour tree library and we can use the trees created for navigation2 as subtrees of other trees. We create node plugins which can be constructed into a tree, inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;BT Navigator&lt;/code&gt;. The node plugins are loaded into the BT and when the XML file of the tree is parsed, the registered names are associated.&lt;/p&gt;

&lt;h3 id=&quot;planning-and-controlling&quot;&gt;Planning and Controlling&lt;/h3&gt;

&lt;p&gt;Two components of navigation are planning a path and executing the motion. Traditionally, these were handled using respective planning and control servers in ROS1. They make information such as costmaps and parameters available to all the other ROS nodes. In ROS2, they are represented as plugins.&lt;/p&gt;

&lt;p&gt;We will keep exploring the navigation2 stack in upcoming blogs so we can program our own plugins and nodes for our own logic. For multirobot exercise, this will be controlling the co-operation between the robots. But for now, let’s see how we can run the exercise.&lt;/p&gt;

&lt;h2 id=&quot;launching-the-exercise&quot;&gt;Launching the exercise&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Install ROS2 foxy by following &lt;a href=&quot;https://index.ros.org/doc/ros2/Installation/Foxy/&quot;&gt;this&lt;/a&gt;  guide.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pull the latest &lt;a href=&quot;https://navigation.ros.org/build_instructions/index.html&quot;&gt;Navigation2&lt;/a&gt; and install it.&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git clone https://github.com/ros-planning/navigation2.git

 &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;navigation2 

 &lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; /opt/ros/foxy/setup.sh

 colcon build

 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; ./install/setup.sh

 &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TURTLEBOT3_MODEL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;waffle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pull CustomRobots repo and build amazon_robot&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git pull https://github.com/shreyasgokhale/CustomRobots.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;CustomRobots/amazon_robot

colcon build

&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; ./install/setup.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pull latest of my colab repo&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git pull https://github.com/TheRoboticsClub/colab-gsoc2020-Shreyas_Gokhale.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Export the paths of models to let gazebo know from where to load them.&lt;/strong&gt; In my case, this was the path&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'export GAZEBO_MODEL_PATH=$GAZEBO_MODEL_PATH:~/CustomRobots/amazon_robot/amazon_robot_gazebo/models'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Launch the exercise&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/colab-gsoc2020-Shreyas_Gokhale/exercises/ros2/amazon_warehouse/launch

 ros2 launch ros2 launch amazon_warehouse_world.py

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In another terminal, launch the solution&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/colab-gsoc2020-Shreyas_Gokhale/exercises/ros2/amazon_warehouse/

 python3 amazonWarehouse.py amazonMap.conf amazonConf.yml

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Success!&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;embed-container&quot;&gt;
  &lt;iframe src=&quot;https://www.youtube.com/embed/QtHRuF0IS8E&quot; width=&quot;700&quot; height=&quot;480&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Feel free to explore the exercise. You can right do almost everything except loading the pallet. The prismatic joint is still not working. I have raised the issue on both gazebo and ros forums and also contacted the developers of gazebo. Hopefully, this will get solved soon. Our next stop will be to introduce multi robot dynamics into the picture!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Na razie!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name>Shreyas Gokhale</name><email>me@shreyasgokhale.com</email></author><category term="amazon-warehouse-robot" /><category term="exercise" /><category term="gazebo" /><category term="ros2" /><category term="nav2" /><category term="week-9" /><summary type="html">Issues Pending: #7 WIP for ROS2 Amazon Robot model</summary></entry><entry><title type="html">Evaluation 2 Report</title><link href="http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/phase-two-report" rel="alternate" type="text/html" title="Evaluation 2 Report" /><published>2020-07-31T15:00:00+02:00</published><updated>2020-07-31T15:00:00+02:00</updated><id>http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/phase-two-report</id><content type="html" xml:base="http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/phase-two-report">&lt;h1 id=&quot;gsoc-phase-2-report&quot;&gt;GSoC Phase 2 Report&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Week&lt;/th&gt;
      &lt;th&gt;Dates&lt;/th&gt;
      &lt;th&gt;Main Tasks&lt;/th&gt;
      &lt;th&gt;Sub tasks completed&lt;/th&gt;
      &lt;th&gt;Issues Resolved / PRs Merged&lt;/th&gt;
      &lt;th&gt;Blog&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Published URL&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 5-6&lt;/td&gt;
      &lt;td&gt;29th June - 12th July&lt;/td&gt;
      &lt;td&gt;Releasing the exercise for ROS Noetic&lt;/td&gt;
      &lt;td&gt;Creating a new model for amazon warehouse robot in &lt;code class=&quot;highlighter-rouge&quot;&gt;.xacro&lt;/code&gt; format and making it fit with academy arch.&lt;/td&gt;
      &lt;td&gt;PR #1 on Jderobot/CustomRobots for new gazebo model.&lt;/td&gt;
      &lt;td&gt;Back to the start&lt;/td&gt;
      &lt;td&gt;AMAZON-WAREHOUSE-ROBOT, EXERCISE, GAZEBO, WEEK-5, WEEK-6&lt;/td&gt;
      &lt;td&gt;https://theroboticsclub.github.io/colab-gsoc2020-Shreyas_Gokhale/back-to-the-start&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 7-8&lt;/td&gt;
      &lt;td&gt;13th July - 26th July&lt;/td&gt;
      &lt;td&gt;Porting Amazon Exercise to ROS2&lt;/td&gt;
      &lt;td&gt;Learning and understanding ROS2 architecture, build systems. Porting model. Creating packages and launch scripts.&lt;/td&gt;
      &lt;td&gt;Issues Fixed: PR #8 on Jderobot/CustomRobots Issues Pending: #7 WIP for ROS2 Amazon Robot model&lt;/td&gt;
      &lt;td&gt;Level 2!&lt;/td&gt;
      &lt;td&gt;AMAZON-WAREHOUSE-ROBOT, EXERCISE, GAZEBO, ROS2, NAV2,&lt;/td&gt;
      &lt;td&gt;https://theroboticsclub.github.io/colab-gsoc2020-Shreyas_Gokhale/level-2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 9&lt;/td&gt;
      &lt;td&gt;27th July - 9th August&lt;/td&gt;
      &lt;td&gt;Porting Amazon Exercise to ROS2&lt;/td&gt;
      &lt;td&gt;Porting navigation stack, bare minimum launchable exercise in ROS2 with working single robot&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Finding the way&lt;/td&gt;
      &lt;td&gt;Research&lt;/td&gt;
      &lt;td&gt;https://theroboticsclub.github.io/colab-gsoc2020-Shreyas_Gokhale/finding-the-way&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>Shreyas Gokhale</name><email>me@shreyasgokhale.com</email></author><category term="evaluation" /><summary type="html">GSoC Phase 2 Report</summary></entry><entry><title type="html">Level 2!</title><link href="http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/level-2" rel="alternate" type="text/html" title="Level 2!" /><published>2020-07-23T22:30:00+02:00</published><updated>2020-07-23T22:30:00+02:00</updated><id>http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/level-2</id><content type="html" xml:base="http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/level-2">&lt;blockquote&gt;
  &lt;p&gt;Issues Fixed:&lt;/p&gt;

  &lt;p&gt;PR &lt;a href=&quot;https://github.com/JdeRobot/CustomRobots/pull/8&quot;&gt;#8&lt;/a&gt; on Jderobot/CustomRobots&lt;/p&gt;

  &lt;p&gt;Issues Pending:&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://github.com/JdeRobot/CustomRobots/issues/7&quot;&gt;#7&lt;/a&gt; WIP for ROS2 Amazon Robot model&lt;/p&gt;

&lt;/blockquote&gt;

&lt;h1 id=&quot;week-7--8-blog&quot;&gt;Week 7 + 8 blog&lt;/h1&gt;

&lt;p&gt;We discussed in the last iteration of the blog about the origins of ROS. After more than a decade of operations, the open
source community became well aware of what awesomeness ROS is, and also some of it’s weaknesses. For example.
as ROS uses it’s own middleware, a ros master must always be running in the background to manage the messages, nodes, servers and actions. 
This makes it much difficult to interface multiple robots with each other, independently. (If you are interested, check out my &lt;a href=&quot;https://github.com/shreyasgokhale/Multi-Robot-Decentralized-Architecture&quot;&gt;masters thesis&lt;/a&gt; repo).&lt;/p&gt;

&lt;p&gt;ROS2 tries to overcome these problems by completely redesigning the underlying architecture while keeping the same concepts. For Jderobot, as we wanted to venture into multi-robots anyway, we decided to port the Amazon Robot exercise to be the first ever exercise in ROS2. This blog is an overview of some of the stuff I was working on for last two weeks and also a short writetup about ROS1 to ROS2 leap.&lt;/p&gt;

&lt;p&gt;We begin by first discussing aa bit about the most important change/ feature of ROS2: &lt;em&gt;DDS&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;dds&quot;&gt;DDS&lt;/h3&gt;
&lt;p&gt;Data Distribution Service (DDS) provides a publish-subscribe transport which is very similar to ROS’s publish-subscribe transport. 
It is very flexible and extensively used in critical applications such as flight systems and battleships. If you are interested in learning more about the DDS and ROS2, if definitely recommend reading &lt;a href=&quot;https://design.ros2.org/articles/ros_on_dds.html&quot;&gt;this&lt;/a&gt; article. &lt;br /&gt;
However the developers have designed the ROS2 system in a such a way that hides much of the complexity of DDS while exposing some of its benefits. Hence we can safely overlook over minor details of the new middleware, for now!&lt;/p&gt;

&lt;h3 id=&quot;ament-workspace-and-colcon-build&quot;&gt;Ament workspace and Colcon Build&lt;/h3&gt;
&lt;p&gt;The second important change is the new build tool. Again, best place is to start with an article about &lt;a href=&quot;https://design.ros2.org/articles/build_tool.html&quot;&gt;build tool&lt;/a&gt;. The new colcon build system is python native can also compile ROS1 and ROS2 packages. The launch files are now written in python3 and packages can be compiled individually.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/l0MYEqEzwMWFCg8rm/giphy.gif&quot; alt=&quot;I know, mind blown!&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;migration-from-ros1&quot;&gt;Migration from ROS1&lt;/h3&gt;
&lt;p&gt;ROS2 has shiny new features such as multithreading and realtime support. But with every change, comes the dreadful migration from ROS1 to ROS2. 
There are 2 excellent articles depicting &lt;a href=&quot;https://design.ros2.org/articles/changes.html&quot;&gt;changes from ROS1 to ROS2&lt;/a&gt; by &lt;em&gt;Dirk Thomas&lt;/em&gt; and &lt;a href=&quot;https://industrial-training-master.readthedocs.io/en/melodic/_source/session7/ROS1-to-ROS2-porting.html&quot;&gt;migration from ROS1 to ROS2&lt;/a&gt; by &lt;em&gt;ROS industrial&lt;/em&gt; and they are a must read before you even think about porting.&lt;/p&gt;

&lt;p&gt;Once we have understood what we are dealing with, and after &lt;a href=&quot;https://index.ros.org/doc/ros2/Installation/#installationguide&quot;&gt;installing&lt;/a&gt; ROS2, it is best to follow the basic &lt;a href=&quot;https://index.ros.org/doc/ros2/Tutorials/#tutorials&quot;&gt;tutorials&lt;/a&gt; of ROS2.&lt;/p&gt;

&lt;p&gt;Once that os done, it is the time to start porting. As mentioned &lt;a href=&quot;https://index.ros.org/doc/ros2/Tutorials/Launch-files-migration-guide/&quot;&gt;here&lt;/a&gt;, I stated by porting a simple launch file. One of the best (and sadly the only complete one) resource for ROS2 examples are from turtlebot3. I considered the &lt;a href=&quot;https://github.com/ROBOTIS-GIT/turtlebot3/tree/foxy-devel&quot;&gt;foxy-devel&lt;/a&gt; branch as a sort of standard for how my code must be structured.
I ported my existing amazon_robot projects to include turtlebot3 model from ROS2&lt;/p&gt;

&lt;h3 id=&quot;ros2-gazebo-and-sdf-16&quot;&gt;ROS2, gazebo and SDF 1.6&lt;/h3&gt;
&lt;p&gt;Now we have reached the part of porting which made me feel embarrassed, miserable and frustrated at the same time: The gazebo models. ROS2 also triggered a lot of changes in the way gazebo_ros connection is handled and made my &lt;a href=&quot;&quot;&gt;newly created&lt;/a&gt; amazon robot &lt;code class=&quot;highlighter-rouge&quot;&gt;.xacro&lt;/code&gt; model useless. I tried &lt;a href=&quot;https://github.com/shreyasgokhale/CustomRobots/blob/foxy-devel/amazon_robot/amazon_robot_description/urdf/amazon_robot_xacro_generated.urdf&quot;&gt;copying over&lt;/a&gt; all include files in one single &lt;code class=&quot;highlighter-rouge&quot;&gt;urdf&lt;/code&gt; file, modifying it and then trying to make gazebo spawn my robot correctly, but it somehow didn’t work. So I resorted to converting my model from &lt;code class=&quot;highlighter-rouge&quot;&gt;.xacro&lt;/code&gt; description to SDF 1.6 model.&lt;/p&gt;

&lt;p&gt;I quickly realized that SDF format is also &lt;a href=&quot;http://sdformat.org/tutorials?tut=pose_frame_semantics&amp;amp;cat=specification&amp;amp;&quot;&gt;significantly changed&lt;/a&gt; and I spent a few more hours trying to fix the link issues. Finally my model turned out somewhat okay, but the lift platform didn’t work as expected. I could create the warehouse world with pallets and our robot in it, but the prismatic joint just didn’t seem to function. I am yet to solve this problem and it might be even worth to completely switch over to a new, proper warehouse robot base like &lt;a href=&quot;https://github.com/IntelligentRoboticsLabs/marathon_ros2&quot;&gt;tiago&lt;/a&gt;.
But sadly, I could not find many well defined robot models for ROS2, except tb3 and &lt;a href=&quot;https://github.com/chapulina/dolly&quot;&gt;dolly&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;navigation-2&quot;&gt;Navigation 2&lt;/h3&gt;
&lt;p&gt;This turned out to be surprisingly well documented. As our exercise will heavily depend on navigation concepts, I went through the awesome &lt;a href=&quot;https://arxiv.org/abs/2003.00368&quot;&gt;navigation2 paper&lt;/a&gt; and &lt;a href=&quot;https://navigation.ros.org/&quot;&gt;documentation&lt;/a&gt; and I would recommend the reader to do the same. I cannot explain this any better than those two resources.&lt;/p&gt;

&lt;p&gt;We will focus more on the navigation part in upcoming weeks. For now, just launching a tb3 simulation was sufficient.&lt;/p&gt;

&lt;h3 id=&quot;porting-the-exercise&quot;&gt;Porting the exercise&lt;/h3&gt;
&lt;p&gt;For ROS Noetic, I had to port the existing python2 code to python3. This turned out to be a nice segue into ROS2 as 1/4th porting work was already done. Still, I had to remove all the &lt;code class=&quot;highlighter-rouge&quot;&gt;rospy&lt;/code&gt; code and morph it into &lt;code class=&quot;highlighter-rouge&quot;&gt;rclpy&lt;/code&gt; one. With a minor hiccup of &lt;code class=&quot;highlighter-rouge&quot;&gt;move_base&lt;/code&gt;, everything works now! As navigation2 integration is still ongoing, this will be updated soon!&lt;/p&gt;

&lt;p&gt;Warehouse
&lt;img src=&quot;assets/blog-images/week-7-8/WarehouseROS2.png&quot; alt=&quot;The warehouse&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Amazon Robot In ROS2
&lt;img src=&quot;assets/blog-images/week-7-8/AmazonRobotInROS2.png&quot; alt=&quot;Amazon Robot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Topics and Services
&lt;img src=&quot;assets/blog-images/week-7-8/TopicsNodesServices.png&quot; alt=&quot;Topics and Services&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;creation-of-new-customrobots-repo&quot;&gt;Creation of new CustomRobots repo&lt;/h3&gt;
&lt;p&gt;In the spirit of modernisation, Jderobot is also introducing new repo for all the Robots and related packages used in the academy in the form of &lt;a href=&quot;https://github.com/JdeRobot/CustomRobots&quot;&gt;CustomRobots&lt;/a&gt; repo. So from now on, my model will be updated there.&lt;/p&gt;

&lt;p&gt;I am eager to also launch the first ever ROS2 academy exercise and hopefully it will be done soon! Until then!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Vi sees senere!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name>Shreyas Gokhale</name><email>me@shreyasgokhale.com</email></author><category term="amazon-warehouse-robot" /><category term="exercise" /><category term="gazebo" /><category term="ros2" /><category term="nav2" /><category term="week-7" /><category term="week-8" /><summary type="html">Issues Fixed: PR #8 on Jderobot/CustomRobots Issues Pending: #7 WIP for ROS2 Amazon Robot model</summary></entry><entry><title type="html">Back to the start</title><link href="http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/back-to-the-start" rel="alternate" type="text/html" title="Back to the start" /><published>2020-07-10T22:00:00+02:00</published><updated>2020-07-10T22:00:00+02:00</updated><id>http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/back-to-the-start</id><content type="html" xml:base="http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/back-to-the-start">&lt;blockquote&gt;
  &lt;p&gt;Issues Fixed:&lt;/p&gt;

  &lt;p&gt;PR &lt;a href=&quot;https://github.com/JdeRobot/CustomRobots/pull/1&quot;&gt;#1&lt;/a&gt; on Jderobot/CustomRobots for new gazebo model.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;week-5--6-blog&quot;&gt;Week 5 + 6 blog&lt;/h1&gt;

&lt;h2 id=&quot;going-back-to-the-drawing-board&quot;&gt;Going back to the drawing board&lt;/h2&gt;

&lt;p&gt;The world is constantly changing. 10 years ago, Facebook was just a new craze and Instagram didn’t exist. But as new technologies and innovations got introduced, they changed the way we do things, and so the way ROS worked.&lt;/p&gt;

&lt;p&gt;Here is an amazing youtube video shot by Redhat explaining the origin story of ROS. I would recommend every ROS developer to watch it at least once, just to get an idea about the complexity of the project and people involved.&lt;/p&gt;

&lt;div class=&quot;embed-container&quot;&gt;
  &lt;iframe src=&quot;https://www.youtube.com/embed/ErHAhRiUaY0&quot; width=&quot;700&quot; height=&quot;480&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Coming back to our story, when I started working with the existing amazon robot gazebo model for the exercise, I realized that it is not working properly. The lift, lasers didn’t work and the model was in &lt;code class=&quot;highlighter-rouge&quot;&gt;.sdf&lt;/code&gt; format. This format describes how to display the robots in Gazebo, however, it is not so friendly with other pieces of the software. The “new” way of doing things is to create different &lt;code class=&quot;highlighter-rouge&quot;&gt;.xacro&lt;/code&gt; format files. This is achieved in by creating three different files&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;robot&amp;gt;.gazebo.xacro&lt;/code&gt; which describes our robot for gazebo parameters (colours, physics, plugins for sensors etc)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;robot&amp;gt;.transmission.xacro&lt;/code&gt; for the transmissions of joints.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;robot&amp;gt;.urdf.gazebo&lt;/code&gt; for describing links and joints.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some of the tutorials that I followed:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gazebosim.org/tutorials?tut=build_model&quot;&gt;Make a model&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gazebosim.org/tutorials/?tut=ros_urdf&quot;&gt;URDF in Gazebo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the beginning I was trying to update the existing robot model to match the new format. Here is the image describing old robot and the robot I was trying to modify.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/blog-images/week-5-6/Untitled.png&quot; alt=&quot;assets/blog-images/week-5-6/Untitled.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/blog-images/week-5-6/Untitled%201.png&quot; alt=&quot;assets/blog-images/week-5-6/Untitled%201.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/blog-images/week-5-6/Untitled%202.png&quot; alt=&quot;assets/blog-images/week-5-6/Untitled%202.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Our model was static, which means it will be ignored by the physics engine. As a result the model will stay in one place and allow us to properly align all the components.&lt;/p&gt;

&lt;p&gt;However, while working on this, I realized that the existing model needed to be updated in major way. Creating new links, setting physics properties and adding supported stuff on top of it was essential to make the exercise workable. Instead of reinventing the wheel, I thought, why not find some existing robot bases and build my model on top of it? The best way to create new stuff is to follow the best practices and so I decided to use turtlebot3_waffle_pi as the base.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ROBOTIS-GIT/turtlebot3/blob/master/turtlebot3_description/urdf/turtlebot3_waffle.gazebo.xacro&quot;&gt;ROBOTIS-GIT/turtlebot3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/blog-images/week-5-6/Untitled%203.png&quot; alt=&quot;assets/blog-images/week-5-6/Untitled%203.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we can use xacro publisher to publish robot states. Sweet.&lt;/p&gt;

&lt;p&gt;After some tweaks, our initial model is ready&lt;/p&gt;

&lt;div class=&quot;embed-container&quot;&gt;
  &lt;iframe src=&quot;https://www.youtube.com/embed/4DCr3LRLVLE&quot; width=&quot;700&quot; height=&quot;480&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;In order to control, we need to install ros-control &lt;a href=&quot;http://gazebosim.org/tutorials?tut=ros_control&quot;&gt;ROS control&lt;/a&gt; packages&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ros-noetic-ros-control ros-noetic-ros-controllers
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ros-noetic-gazebo-ros-control
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, the robot is too small to push around big pallets of storage. To fix that, I had to make the robot 2ce bigger and had to fix wheels and other joints accordingly. I increased the friction coefficient of platform and wheels, so they grip more.&lt;/p&gt;

&lt;p&gt;And finally, we can make prismatic joint work by publishing to a ros joint.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rostopic pub &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt; /amazon_robot/joint1_position_controller/command std_msgs/Float64 &lt;span class=&quot;s2&quot;&gt;&quot;data: 1&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The new exercise is now ready to use! Have fun!&lt;/p&gt;

&lt;div class=&quot;embed-container&quot;&gt;
  &lt;iframe src=&quot;https://www.youtube.com/embed/HtUEAweSmAg&quot; width=&quot;700&quot; height=&quot;480&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dyno-docs.readthedocs.io/en/latest/simulation/robots.html#forklift&quot;&gt;Robots - Dyno 1 documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/samiamlabs/dyno&quot;&gt;samiamlabs/dyno&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Friction#Coefficient_of_friction&quot;&gt;Friction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Plugin for maps from gazebo state &lt;a href=&quot;https://github.com/marinaKollmitz/gazebo_ros_2Dmap_plugin&quot;&gt;marinaKollmitz/gazebo_ros_2Dmap_plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.ros.org/urdf/XML/joint&quot;&gt;URDF Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Até mais!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name>Shreyas Gokhale</name><email>me@shreyasgokhale.com</email></author><category term="amazon-warehouse-robot" /><category term="exercise" /><category term="gazebo" /><category term="week-5" /><category term="week-6" /><summary type="html">Issues Fixed: PR #1 on Jderobot/CustomRobots for new gazebo model.</summary></entry><entry><title type="html">Evaluation 1 Report!</title><link href="http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/phase-one-report" rel="alternate" type="text/html" title="Evaluation 1 Report!" /><published>2020-07-01T22:00:00+02:00</published><updated>2020-07-01T22:00:00+02:00</updated><id>http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/phase-one-report</id><content type="html" xml:base="http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/phase-one-report">&lt;h1 id=&quot;gsoc-phase-1-report&quot;&gt;GSoC Phase 1 Report&lt;/h1&gt;

&lt;p&gt;The first 4 weeks of Google summer of code were quite productive. I got acquainted with the development of Jderobot, created docker containers, migrated Amazon Warehouse exercise and published videos, everything within a month.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Week&lt;/th&gt;
      &lt;th&gt;Dates&lt;/th&gt;
      &lt;th&gt;Main Tasks&lt;/th&gt;
      &lt;th&gt;Sub tasks completed&lt;/th&gt;
      &lt;th&gt;Issues Resolved / PRs Merged&lt;/th&gt;
      &lt;th&gt;Blog&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Published URL&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 0&lt;/td&gt;
      &lt;td&gt;4th May - 1st June&lt;/td&gt;
      &lt;td&gt;Getting to know Jderobot Academy, Setup&lt;/td&gt;
      &lt;td&gt;Solving Global navigation exercise: Path planner, motion planning&lt;/td&gt;
      &lt;td&gt;Issues Fixed: #1 with PR&lt;/td&gt;
      &lt;td&gt;Beginning of GSoC Journey, Community Bonding 1,2&lt;/td&gt;
      &lt;td&gt;Blog&lt;/td&gt;
      &lt;td&gt;https://theroboticsclub.github.io/colab-gsoc2020-Shreyas_Gokhale/beginning-of-gsoc-journey&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 1&lt;/td&gt;
      &lt;td&gt;1st June - 7th June&lt;/td&gt;
      &lt;td&gt;Releasing Jderobot Assets&lt;/td&gt;
      &lt;td&gt;Adding Jderobot_assets for ROS Noetic Distro, Writing instructible guide, Creating complete docker image&lt;/td&gt;
      &lt;td&gt;#53,54 “Adding Noetic support for repo” with PRs #54 for Jderobot_assets, and #25236 for ROS distro with commits.&lt;/td&gt;
      &lt;td&gt;And we have a liftoff!&lt;/td&gt;
      &lt;td&gt;How To, Release&lt;/td&gt;
      &lt;td&gt;https://theroboticsclub.github.io/colab-gsoc2020-Shreyas_Gokhale/and-we-have-a-liftoff&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 2&lt;/td&gt;
      &lt;td&gt;8th June - 14th June&lt;/td&gt;
      &lt;td&gt;Porting Amazon Exercise to ROS Noetic&lt;/td&gt;
      &lt;td&gt;Porting existing packes for Python and C++&lt;/td&gt;
      &lt;td&gt;#3 with PR #4.&lt;/td&gt;
      &lt;td&gt;Let’s start (c)making&lt;/td&gt;
      &lt;td&gt;Research&lt;/td&gt;
      &lt;td&gt;https://theroboticsclub.github.io/colab-gsoc2020-Shreyas_Gokhale/lets-start-cmaking&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 3&lt;/td&gt;
      &lt;td&gt;14th June -1st June&lt;/td&gt;
      &lt;td&gt;Porting Amazon Exercise to ROS Noetic&lt;/td&gt;
      &lt;td&gt;Removing comm dependency and adding connector library&lt;/td&gt;
      &lt;td&gt;#5 with PR #6.&lt;/td&gt;
      &lt;td&gt;Connecting the dots!&lt;/td&gt;
      &lt;td&gt;Development&lt;/td&gt;
      &lt;td&gt;https://theroboticsclub.github.io/colab-gsoc2020-Shreyas_Gokhale/connecting-the-dots&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 4&lt;/td&gt;
      &lt;td&gt;22nd June -28th June&lt;/td&gt;
      &lt;td&gt;Launching Exercise&lt;/td&gt;
      &lt;td&gt;Writing instructions, Finalizing Docker, Model Updates&lt;/td&gt;
      &lt;td&gt;PR #58 on Jderobot/assets for gazebo model update. PR #1401 on Jderobot/base for connector package. PR #8 on colab repo for launchable docker exercise.&lt;/td&gt;
      &lt;td&gt;Launch off!&lt;/td&gt;
      &lt;td&gt;Publishing Exercise&lt;/td&gt;
      &lt;td&gt;https://theroboticsclub.github.io/colab-gsoc2020-Shreyas_Gokhale/launch-off&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Week 5&lt;/td&gt;
      &lt;td&gt;29th June - 5th July&lt;/td&gt;
      &lt;td&gt;Launching Exercise, New idea discussion&lt;/td&gt;
      &lt;td&gt;Releasing video, How - to guide, Official release for ROS Noetic&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>Shreyas Gokhale</name><email>me@shreyasgokhale.com</email></author><category term="evaluation" /><summary type="html">GSoC Phase 1 Report</summary></entry><entry><title type="html">Launch Off!</title><link href="http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/launch-off" rel="alternate" type="text/html" title="Launch Off!" /><published>2020-06-27T10:00:00+02:00</published><updated>2020-06-27T10:00:00+02:00</updated><id>http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/launch-off</id><content type="html" xml:base="http://localhost:4000/colab-gsoc2020-Shreyas_Gokhale/launch-off">&lt;blockquote&gt;
  &lt;p&gt;Issues Fixed:&lt;/p&gt;

  &lt;p&gt;PR &lt;a href=&quot;https://github.com/JdeRobot/assets/pull/58#event-3488709128&quot;&gt;#58&lt;/a&gt; on Jderobot/assets for gazebo model update.&lt;/p&gt;

  &lt;p&gt;PR &lt;a href=&quot;https://github.com/JdeRobot/base/pull/1401&quot;&gt;#1401&lt;/a&gt; on Jderobot/base for connector package.&lt;/p&gt;

  &lt;p&gt;PR &lt;a href=&quot;https://github.com/TheRoboticsClub/colab-gsoc2020-Shreyas_Gokhale/pull/8&quot;&gt;#8&lt;/a&gt; on colab repo for launchable docker exercise.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;week-4&quot;&gt;Week 4&lt;/h1&gt;

&lt;p&gt;After last week’s removal of comm, I was pretty confident about being able to run the exercise. But it seemed like the exercise wasn’t ready for that yet! I couldn’t seem to get cmd vel (joystick) working.&lt;/p&gt;

&lt;p&gt;After digging up a bit, I traced the problem back to &lt;code class=&quot;highlighter-rouge&quot;&gt;model.sdf&lt;/code&gt; file. This is gazebo model which describes how our robot looks and behaves like. One major part of gazebo are &lt;a href=&quot;http://gazebosim.org/tutorials?tut=ros_gzplugins&quot;&gt;plugins&lt;/a&gt; and they are binaries which code the functionality, for example lasers and motors. I was getting following error:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;libgazebo_ros_diff_drive.so not found&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After trying for hours, posting on ROS forum and getting frustrated, I finally found the culprit: &lt;code class=&quot;highlighter-rouge&quot;&gt;gazebo-plugins&lt;/code&gt;  . This package was necessary to run the default plugins and luckily it just got ported to noetic. After fixing some issues with the sdf, the whole exercise is now up and running!&lt;/p&gt;

&lt;h2 id=&quot;amazon-warehouse-exercise&quot;&gt;Amazon Warehouse exercise&lt;/h2&gt;

&lt;p&gt;The objective of this practice is to implement the autonomous robot navigation and pick-and-place logic in warehouse.&lt;/p&gt;

&lt;p&gt;For trying out, you have 2 options:&lt;/p&gt;

&lt;h3 id=&quot;docker-install&quot;&gt;Docker install&lt;/h3&gt;

&lt;p&gt;This is the preferred installation method.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Follow &lt;a href=&quot;https://docs.docker.com/get-docker/&quot;&gt;these instructions&lt;/a&gt; to install docker and docker-compose.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Clone my repo&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git clone https://github.com/TheRoboticsClub/colab-gsoc2020-Shreyas_Gokhale.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run from the root directory&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; xhost +&lt;span class=&quot;s2&quot;&gt;&quot;local:docker@&quot;&lt;/span&gt;
 docker-compose up &lt;span class=&quot;nt&quot;&gt;--force-recreate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Sit back, sip a coffee or whatever while the dockerfile is being built. The exercise will be launched automatically once building is finished.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;manual-installation&quot;&gt;Manual Installation&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Follow the instructions on &lt;a href=&quot;http://wiki.ros.org/noetic/Installation/Ubuntu&quot;&gt;ROS Wiki&lt;/a&gt; to install the latest ROS and on &lt;a href=&quot;http://gazebosim.org/tutorials?tut=install_ubuntu&amp;amp;cat=install&quot;&gt;Gazebo Wiki&lt;/a&gt; to install Gazebo 11.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install all the dependencies&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update
 &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential  
 &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rosdep init  
 rosdep update
 &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ros-noetic-mavros ros-noetic-gazebo-ros python3-pip ros-noetic-navigation ros-noetic-gazebo-plugins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install Jderobot Assets&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ros-noetic-jderobot-assets
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;The model.sdf file needs slight modification (until aptitude packages are updated). So grab the updated file and copy it over to the original file&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; wget https://raw.githubusercontent.com/JdeRobot/assets/noetic-devel/jderobot_assets/models/amazon_warehouse_robot/model.sdf &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;model.sdf&quot;&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; model.sdf /opt/jderobot/share/jderobot/gazebo/models/amazon_warehouse_robot/model.sdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Clone my repo&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git clone https://github.com/TheRoboticsClub/colab-gsoc2020-Shreyas_Gokhale.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Run the exercise&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;exercises/amazon_warehouse/launch 
 roslaunch amazonrobot_1_warehouse.launch map_file:&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;maps/map.yaml 
 python3 amazonWarehouse.py amazonMap.conf amazonConf.yml

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Try to code your solution in &lt;code class=&quot;highlighter-rouge&quot;&gt;mysolution.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let me know if you face any issues or bugs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Viszlát!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name>Shreyas Gokhale</name><email>me@shreyasgokhale.com</email></author><category term="amazon-warehouse" /><category term="exercise" /><category term="porting" /><category term="week-4" /><summary type="html">Issues Fixed: PR #58 on Jderobot/assets for gazebo model update. PR #1401 on Jderobot/base for connector package. PR #8 on colab repo for launchable docker exercise.</summary></entry></feed>